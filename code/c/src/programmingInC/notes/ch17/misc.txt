The goto statement:

ex:

goto out_of_data;

causes the program to branch immediately to the statment that is preceded by
the label out_of_data:.  this label can be located anywhere in the function, 
before or after goto.

ex: 

out_of_data: printf("Unexpected end of data.\n");

BADBADBADBADBAD

------------------------------------------------------------------
The null statment:

often used in while, for, and do statements. Below, it is used to stroe
all the cahracters read in from the standard input intothe character array
pointed to by text until a newline character is encountered. 

ex:

while ( (*text++ = getchar ()) != '\n')
	;

ex: copies characters from stdin to stdout until end of file. 

for ( ; (c = getchar ()) != EOF; putchar (c) )
	;

ex: counts number of characters that appera in stdin

for ( count = 0; getchar () !=EOF; count++)
	;

ex: copies character string pointed to by from to the one pointed to by to:

while ( (*to++ = *from++) != '\0')
	;
-----------------------------------------------------------------
Unions:

If you want to define a variable called x, which stores a single char, a 
float, or an int, you could define a union:
ex:

mixed:

union mixed {
	char c;
	float f;
	int i;
};

the declartion is identical to structs. The difference has to do with the 
way memory is allocated. 

ex:

union mixed x;

does not define x to contain three distnc members called c, f, or i, rather
it defines x to contain a single member that is called either c, f, or i. x
can then be used to store either a char or a float or an int, but not all 3. 

you can store a character in x with:

x.c = 'K';

printf("Character = %c\n", x.c);

float:

x.f = 786.389

to store result of dividing 'count' by 2:

x.i = count / 2; 

----
If no member name is specified, the 1st member of the union is set to value
ex:

union mixed x = { '#' };
this sets c to #

ex:

union mixed x = {.f = 123.456;};

sets f  to 123.456

----------------------------------
Automatic union variable:

void foo (union mixed x) {
	union mixed y = x;
	...
}

foo assigns to the automatic union variable y the value of x. 

-------------------------
The use of a union allows you to define arrays that can be used to store
elements of different data types:

struct {
	char			*name;
	enum symbolType type;
	union {
		int i;
		float f;
		char c;
	} data;
} table [kTableEntries];

sets up an array called table, consiting of kTableEntries elemtents. each
element of array contains a struct containg a charcter pointer called name,
a enum called type, and a union called data. 

to store the char '#' in table[5], and use the type field to indicate that
a character is stored in taht locaiton:

table[5].data.c = '#'
table[5].type = CHARACTER;


------------------------------------------------------------------
The Comma Operator:

the comma operator can be used to seperate multiple expressions anywhere
that a valid C expression can be used. 
ex:

while (i < 100)
	sum += data[i], i++;

the value data[i] is added to sum and then i is incremented. 

--------------------------------------------------------------
Type Qualifiers:

register:

if a function uses a variable a lot, you can request that access to the 
variable be made as fast as possible. this is done with register:

register int index;
register char *textPtr;

-------------
volatile:

tells the complier that the specified variable will change its value. 
suppose you have an output port that is pointed to by a variable in 
program called outPort. if you wnat to write 2 characters to the port:

*outPort = 'O';
*outPort = 'N';

------------
restrict:

restrict tells the complier that a pointern is the only reference to the 
value it pointsto throughout its scope. The lines:

int * restrict intPtrA;
int * restrict intPtrB;

tells the complier that for the duration of the scope in which intPtrA and
intPtrB are defined, they will never access the same value. 

-----------------------------------------------------------------
