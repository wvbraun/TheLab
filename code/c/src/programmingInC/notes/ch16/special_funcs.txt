fopen:

before you can do any i/o operations on a file, the file must first be
opened. fopen takes 2 arguments:
1. a character string specifying the name of the file to be opened. 
2. a character string that indicates the mode in which the file is to 
be opened. 

ex:

#include <stdio.h>

FILE *inputFile;

inputFile = fopen ("data", "r");

opens a file called datta in read mode. 

if (inputFile == NULL)
	printf("*** data could not be opened.\n");
else
	// read the data from the file 

lets you know if the open was successful. 

-------------------------------------
getc and putc :

getc allows you to read in a single character from a file. 

ex:
c = getc (inputFile);

has the effect of reading a single character from data. 

---
putc allows you to read a single characterfrom file. 

ex:
putc ('\n', outputFile);

---------------------------------------
fclose 

The fclose closes a file. the argument is the FILE pointer of the file
to be closed. 

ex:

fclose (inputFile;)

------------------------------------------
feof

to test for an end-of-file condition on a file, the function feof 
is provided. The single argument is a FILE pointer. the function
returns and int value that is nonzero if anattempt has been made to read
past the end of a file, and is zero otherwise. 

ex:

if (feof (intFile) ) {
	printf("Ran out of data.\n");
	return 1;
}

displays ran out of data if an EOF condition exists. 
----------------------
fprintf and fscanf

To write the character string "Programming in C is fun.\n" into a file
identified by outFile:

fprintf (outFile, "Programming in C is fun.\n");

----
To read in the next float value from the file identified by inFile into 
the variable fv:

fscanf (inFile, "%f", &fv);

------------------------
fgets and fputs

For reading and writing entire lines of data from and to a file, the 
fputs and fgets functions can be used.

fgets ex:

fgets (bugger, n, filePtr);

buffer is a pointer to a character array where the line that is read in
will be stored. n is an int value that represents the max number of 
characters to be stored into buffer. and filePtr identifies the file
from which the line is to be read. 

the fgets function reads characters from the specified file until a 
newline character has been read, or until n-1 characers have been read. 
The funcation  automatically places a null character after the last
character in buffer. it returns the value of buffer (the 1st arg) if
the read is successful and NULL if read past EOF.

fgets can be used with sscanf to perform line-oriented reading. 

---
fputs ex: which wirets a line of characters to file.

fputs (buffer, filePtr);

characters stored in array pointed to by buffer are written to the file
'filePtr'. 

-------------------------------------------------------
stdin, stdout, stderr

ex: the scanf function reads its input from stdin, and a call to this
function is equivalent to a call to fscanf function:

fscanf (stdin, "%i", &i);

reads in the next int value from the standar input. 
----
stdout refers to standar output. 

printf ("hello there.\n");
can be replaced by call to fprintf with stdout 

fprintf (stdout, "hello there.\n");
--

the FILE pointer stderr identifies the standard error file. you might
want to write your own error messages to stderr:

if ( (inFile - fopen ("data", "r")) == NULL) {

	fprintf(stderr, "cannot open data for reading.\n");
	...
}

writes the indicated error message to stderr if the file data cannot be
opended for reading. 

-------------------
exit

to terminate a program, exit can be used:

exit (n):

has the effect of terminating the current program. 

the standard header file <stdlib.h> defines EXIT_FAILURE as an int value
that you can use to indicate the program has failed. and EXIT_SUCCESS to
be one to indicated it has succeeded. 

ex: causes program to terminate with an exit status of EXIT_FAILURE if the
file specified cannot be opened for reading. 

#include <stdlib.h>
#include <stdio.h>

FILE *openFile (const char *file) {

	FILE *inFile;

	if ( (inFile = fopen (file, "r")) == NULL) {
		fprintf(stderr, "cant open %s for reading.\n", file);
		exit (EXIT_FAILURE);
	}

	return inFile;
}

-------------------------------------------
Renaming and removing files

the rename function from the library can be used to change the name of
a file. it takes 2 arguments: the old filename and the new one. 

ex:

if (rename ("tempfile", "database") ) {
	fprintf(stderr, "cannot rename remfile\n");
	exit (EXIT_FAILURE);
}

renames the file called tempfiel to database and checks if successful. 

---
The remove function deltes the file. it returns a nonzer if failed. 

ex:

if ( remove ("tempfile") {
	fprintf(stderr, "cannot remove tempfile\n");
	exit (EXIT_FAILURE);
}

attemps to remove tempfile and writes error message if fails. 

