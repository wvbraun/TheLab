The heap is all the remaining memory in your computer,
and you access it with the function malloc to get more
Each time you call malloc, the OS uses internal 
functions to register that piece of memory to you, 
and then returns a pointer to it. When you are done, 
you use free to return it to the OS so it can be 
used by other programs. Failing to do so will cause 
your program to leak memory. 

----

The stack is a special region of memory that stores temporary variables each function creates as locals to 
that function. Each argument to a function is 'pushed'
onto the stack, and then used in the function. 
The advantage of using stack is when the function 
exits, the C complier 'pops' these variables off 
the stack to clean up. This is simple and prevents 
memory leaks if the variable is on the stack. 

------------------------------
Mantra: If you did not get it from malloc or a 
function that got it from malloc, 
then it is on the stack! 

-------------------------------

Three primary problems with stacks and heaps:

1. If you get a block of memory from malloc, and
have that pointer on the stack, then when the 
function exits, the pointer will get popped off 
and lost. 

---- 

2. If you put too much data on the stack (like large
structs and arrays) then you can cause a stack 
overflow and the program will abort. 
In this case, use the heap with malloc. 

----

3. If you take a pointer to something on the stack, 
and then pass that or return it from your function, 
then the function recieving it will 
'segmentation fault' (segfault) because the actual 
data will get popped off and disappear. 
You'll be pointing at dead space. 
