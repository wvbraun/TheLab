A pointer is a variable that contains the address of a variable.
 Pointers are much used in C; partly because they are sometimes the only way to express a computation, and partly because they usually lead to more compact and effiecnt code than can be obtained in other ways. 

---------------------------------------------------------------------

There are four primary useful things you can do with pointers in C code:

1. Ask the OS for a chunk of memory and use a pointer to work with it. This includes strings and structs. 

2. Passing large blocks of memory (like large structs) to functions with a pointer so you do not have to pass the whole thing to them. 

3. Taking the address of a function so you can use it as a dynamic callback

4. Complex scanning of chunks of memory such as converting bytes off a network socket into data structurs or parsing files. 

--------------------------------------------------------------------------

The Pointer Lexicon

type *ptr - " a pointer of type named ptr"

*ptr - "the value of whatever ptr is pointed at"

*(ptr + i) - "the value of (whatever ptr is pointed at plus i)"

&thing - "the address of thing"

type *ptr = &thing - "a pointer of type named ptr set to the address of thing"

ptr++ - "increment where ptr points"
