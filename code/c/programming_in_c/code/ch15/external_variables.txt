External Variables:

Functions contained in seperate files can communicate through external
variables. An external variable is one whose value can be accessed and
changed by another module. Inside the module that wants to access the 
external variable, the variable is declaredin the normal fashion and
the keyword extern is placed before the declaration. 

----
Suppose you want to define an int variable called moveNumber, whose value
you want to access and possibly modify from within a function contained
in another file. 

To reference the value of an external variable from another module, you
must declare the variable with the keyword extern:

extern int moveNumber;

-----
You must obey an important rule when working with external variables;
The variable has to be defined in some place among your source files.
This is done in two ways. 

1. Declare the variable outside of any function, not preceded by extern:

ex: 

int moveNumber;

---
2. Declare the variable outside of any function, placing extern in front
and explicity assigning an initial value to it:

ex:

extern int moveNumber = 0; 

------------------------------------------------------
Example with external variables, main.c

#include <stdio.h>

int i = 5;

int main (void) {

	printf("%i ", i);

	foo ();

	printf("%i\n", i);

	return 0;
}

-----------------
Now create foo.c

extern int i;

void foo (void) {

	i = 100;
}

compiling the two modules main.c and foo.c with:

$ gcc main.c foo.c 

produces the output: 100

--------------------------------
When declaring an external array, it is not necessary to give its size:

extern char text[];

enables you to reference a character array text. 

--
ifthe exteranl array is multidimensional, all but the first dimension
must be specified:

extern int matrix[][50];
