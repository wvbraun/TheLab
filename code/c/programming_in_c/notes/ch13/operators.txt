The # Operator 

if you place a # in front of a paramter in a macro defintion, the
preprocessor creates a constant string out of the macro argument 
when the macro is invoked. 

ex:

#define str(x)	#x

causes 

str (testing) to be expanded into "testing"

----
printf (str(Programming in C is fun.\n));

is equalivent to 

printf ("Programming in C is fun.\n");

---------------
ex:

#define printint(var)	printf (# var " = %i\n",var)

this macro is used to display the value of an int variable. If 
count is an int variable with value of 100:

printint(count);
is expanded into 
printf("count" " = %i\n", count);

-----------------------------------------------------------------

The ## operator

This operator is used in macro defintions to join two tokens 
together. It is preceded or followed by the name of a paramter to
the macro. 

Suppose you have a list of variables x1 through x100. You can
write a macro called printx that takes as it argument an int value
1 throgh 100 and that displays the corresponding x values:

#define printx(n)	printf ("%i\n", x ## n)

x ## n - says to take the tokens that occur before and after the 
## and make a single token out of htem. 

So the call:

printx(20); is expanded into printf ("%i\n", x20);

The printx macro could even use the previously defined printint 
macro. 

#define printx(n)	printint(x ## n)

the invocation printx (10);

first expands into: printinf (x10);

and then into: printf("x10" "=%i\n", x10);

-----------------------------------------------------------------
The #include statement

Supposeyou are writing a series of programs for performing various
metric conversions. You might want to set up some defines for all 
of the constants that you need:

#define INCHES_PER_CENTIMETER	0.394
#define CENTIMETERS_PER_INCH	1 / INCHES_PER_CENTIMETER	

#define QUARTS_PER_LITER	1.057
#define LITERS_PER_QUART	1 / QUARTS_PER_LITER

You could save these to a file called metric.h 

Then if you wanted to use any of the defintions in metric.h you 
would need to include them with 

#include "metric.h"

enclosing the filename with < > instead:

#include <metric.h> 

causes the preprocessor to look for the include file in the 
special sytem include file directories. 

On Unix systmes the system include file directory is found in 
/usr/include
so the standar header file stdio.h can be found in 
/usr/include/stdio.h
