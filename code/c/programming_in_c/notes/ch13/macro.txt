In C, definitions are frequently called macros. 

ex:

#define SQUARE(x)	x*x

allows one to write statments like:
y = Square(v);

-------------
The conditional expression operator can be handy when defining 
macros. The following defines a macro called MAX that gives 
the maximum of two values. 

#dfine MAX(a,b)	( ((a) > (b)) ? (a) : (b))

this enables one to write statements like:

limit = MAX(x+y, minValue); 
which would assign to limit the maximum of x+y and minValue. 

-----------------------
The following macro tests if a character is a lowercase letter:

#define IS_LOWER_CASE(x)	( ((x) >= 'a') && ((x) <= 'z') )

-----------------------------------------------------------

Variable Number of Arguments to Macros 

A macro can be defined to take an indeterminate or variable number
of arguments. This is specified to the preprocessor by putting 
threedots at the end of the argument list. The remaining 
arguments in the list are collectively referenced in the macro
definition by the special idefintifer __VA_ARGS__

ex: 

#define debugPrintf(...)	printf("DEBUG: "__VA_ARGS__);

legimate macro uses would include:

debugPrintf ("Hello world!\n");

output: DEBUG: Hellow World!

as well as

debugPrintf ("i= %i, j = %i\n", i, j);

output: DEBUG: i = , j = 
