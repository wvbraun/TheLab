Priority Queues with Binary Heaps

We already learned about the first-in first-out data structure called a queue. One important variation is
called a priority queue.

Priority Queue - 
	
	Acts like a queue in that you can dequeue an item by removing it from the front. However, in a priority
	queue the logical order of items inside a queue is determined by their priority. The highest priority 
	items are at the front of the queue and the lowest priority items are at the back. Thus when you enqueue
	an item on a priority queue, the new item may move all the way to the front. 

Inserting into a list - O(n)
Sorting a list - O(nlogn)

The classic way to implement a priority queue is using a binary heap. A binary heap will allow use both 
enqueue and dequeue items in O(logn)

The binary heap has two common variations:

	- Min heap
		The smallest key is always at the front

	- Max heap
		The largest key value is always at the front. 

------------------------------------------------------------------------------------------------------
Binary Heap Operations - min heap

	- BinaryHeap(): creates a new, empty, binary heap. 

	- insert(k): adds a new item to the heap

	- findMin(): returns the item with the minimum key value, leaving item in the heap.

	- delMin(): returns the item with the minimum key value, removing teh item from the heap. 

	- isEmpty(): returns true if the heap is empy, false otherwise

	- size(): returns the number of items in the heap

	- buildHeap(list): builds a new heap from a list of keys. 

--------------------------------------------------------------------------------------------------------
Binary Heap Implementation

The Structure Property:

	In order to make our heap work efficiently, we will  take advantage of the logarithmic nature of the 
	binary tree to represent our heap. In order to guarantee logarithmic performance, we must keep our tree
	balanced. A balanced binary tree has roughly the same number of nodes in the left and right subtrees 
	of the root. 

	Complete Binary Tree - 
		A tree in which each level has all of its nodes; the exception being the bottom level of the tree. 

	Another interesting property of a complete tree is that we can represent it using a single list. We do 
	not need to use nodes and references or even lists of lists. Because the tree is complete, the left 
	child of a parent (at position p) is the node that is found in position 2p in the list. Similarly, the 
	right child of the the parrent is at position (2p + 1) in the list. 
	To find the parent of any node in the tree, we can use Pythons integer division. Given that a node is
	at position n in the list, the parent is a position (n/2) 

The Heap Order Property:

	The method that we willuse to store items in a heap relies on maintaing the heap order property. 

	Heap Order Property - 
		In a heap, for every node x with parent p, the key in p is smaller than or equal to the key in x. 

----------------------------------------------------------------------------------------------------------
Heap Operations

	We will begin our implementation of a binary heap withthe constructor. Since the entire binary heap can
	be represented by a single list, all the constructor will do is initialize the list and an attribute
	currentSize to keep track of the current size of the heap. 

	notice that an empty binary heap has a single zero as the first element of heapList and that this zero 
	is not used, but it is there so that simple integer division can be used later. 

class BinHeap:
	def __init__(self):
		self.heapList = [0]
		self.currentSize = 0

	The next method will be insert. The easiest way to add an item to a list is to simply append the item to 
	the end of the list. The good news about appending is that is guarantees that we will maintain the 
	complete tree property. The bad news is that we will very likely violate the heap structure property. 
	However, it is possible to write a method that will allow us to regain the heap structure property by
	comparing the newly added item with its parent. If the newly added item is less than its parent, then we
	can swap the item with its parent. 

def percUp(self, i):
	while i // 2 > 0:
		if self.heapList[i] < self.heapList[i // 2]:
			tmp = self.heapList[i // 2]
			self.heapList[i // 2] = self.heapList[i]
			self.heapList[i] = tmp
	i = i // 2

def insert(self, k):
	self.heapList.append(k)
	self.currentSize += 1
	self.percUp(self.currentSize)

	Since the heap property requires that the root of the tree be the smallest item in the tree, finding 
	the minimum item is easy. The hard part of delMin is restoring full compliance with the heap structure
	and heap order properties after the root has been removed. 
	We can restore our heap in two steps:

		1. Restore the root item by taking the last item in the list and moving it to the root position. 
		Moving the last item maintains our heap structure property. However, we have probably destroyed the
		heap order property of our binary heap. 

		2. Restore the heap order property by pushing the new root node down the tree to its proper position.

	In order to maintain the heap order property, all we need to do is swap the root with its smallest child
	less than the root. After the initial swap, we may repeat the swapping process with a node and its 
	children until the node is swapped into a position on the tree where it is already less than both 
	children. 

def percDown(self, i):
	while (i * 2) <= self.currentSize:
		mc = self.minChild(i)
		if self.heapList[i] > self.heapList[mc]:
			tmp = self.heapList[i]
			self.heapList[i] = self.heapList[mc]
			self.heapList[mc] = tmp
		i = mc

def minChild(self, i):
	if i * 2 + 1 > self.currentSize:
		return i * 2

	else:
		if self.heapList[i*2] < self.heapList[i*2+1]:
			return i*2
		else:
			return i*2+1
