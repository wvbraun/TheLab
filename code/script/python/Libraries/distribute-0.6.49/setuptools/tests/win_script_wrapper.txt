Python Script Wrapper for Windows
=================================

setuptools includes wrappers for Python scripts that allows them to be
executed like regular windows programs.  There are 2 wrappers, once
for command-line programs, cli.exe, and one for graphica programs,
gui.exe.  These programs are almost identical, function pretty much
the same way, and are generated from the same source file.  The
wrapper programs are used by copying them to the directory containing
the script they are to wrap and with the same name as the script they
are to wrap.  In the rest of this document, we'll give an example that
will illustrate this.

Let's create a simple script, foo-script.py:

    >>> import os, sys, tempfile
    >>> from setuptools.command.easy_install import nt_quote_arg
    >>> sample_directory = tempfile.mkdtemp()
    >>> f = open(os.path.join(sample_directory, 'foo-script.py'), 'w')
    >>> bytes_written = f.write(
    ... """#!%(python_exe)s
    ... import sys
    ... input = repr(sys.stdin.read())
    ... print(sys.argv[0][-14:])
    ... print(sys.argv[1:])
    ... print(input)
    ... if __debug__:
    ...     print('non-optimized')
    ... """ % dict(python_exe=nt_quote_arg(sys.executable)))
    >>> f.close()

Note that the script starts with a Unix-style '#!' line saying which
Python executable to run.  The wrapper will use this to find the
correct Python executable.

We'll also copy cli.exe to the sample-directory with the name foo.exe:

    >>> import pkg_resources
    >>> f = open(os.path.join(sample_directory, 'foo.exe'), 'wb')
    >>> bytes_written = f.write(
    ...     pkg_resources.resource_string('setuptools', 'cli-32.exe')
    ...     )
    >>> f.close()

When the copy of cli.exe, foo.exe in this example, runs, it examines
the path name it was run with and computes a Python script path name
by removing the '.exe' suffic and adding the '-script.py' suffix. (For
GUI programs, the suffix '-script-pyw' is added.)  This is why we
named out script the way we did.  Now we can run out script by running
the wrapper:

    >>> from subprocess import Popen, PIPE, STDOUT
    >>> try:
    ...     unicode=unicode
    ... except:
    ...     unicode=str
    >>> def popen4(cmd, *args):
    ...     if hasattr(os, 'popen4'):
    ...         input, output = os.popen4(cmd + " ".join(args))
    ...         return input, output
    ...     else:
    ...         #emulate popen4 in python 3
    ...         if cmd[0] == '"' and cmd[-1] != '"':
    ...             cmd = cmd[1:]
    ...         cmd += " ".join(args)
    ...         p = Popen(cmd, shell=True, bufsize=0,
    ...                               stdin=PIPE, stdout=PIPE, stderr=STDOUT)
    ...         return p.stdin, p.stdout
    
    >>> input, output = popen4('"' + nt_quote_arg(os.path.join(sample_directory, 'foo.exe')), 
    ...                        r' arg1', r'"arg 2"', r'"arg \"2\\\""', r'"arg 4\\"', r'"arg5 a\\b"')
    >>> bytes_written = input.write('hello\nworld\n'.encode('utf-8'))
    >>> input.close()
    >>> # This is needed for line ending differences between py2 and py3 on win32
    >>> msg = unicode(output.read(), encoding='utf-8').split("\n")
    >>> for line in msg:
    ...     print(line.strip()) 
    \foo-script.py
    ['arg1', 'arg 2', 'arg "2\\"', 'arg 4\\', 'arg5 a\\\\b']
    'hello\nworld\n'
    non-optimized
    <BLANKLINE>

This example was a little pathological in that it exercised windows
(MS C runtime) quoting rules:

- Strings containing spaces are surrounded by double quotes.

- Double quotes in strings need to be escaped by preceding them with
  back slashes.

- One or more backslashes preceding double quotes quotes need to be
  escaped by preceding each of them them with back slashes.


Specifying Python Command-line Options
--------------------------------------

You can specify a single argument on the '#!' line.  This can be used
to specify Python options like -O, to run in optimized mode or -i
to start the interactive interpreter.  You can combine multiple
options as usual. For example, to run in optimized mode and
enter the interpreter after running the script, you could use -Oi:

    >>> f = open(os.path.join(sample_directory, 'foo-script.py'), 'w')
    >>> bytes_written = f.write(
    ... """#!%(python_exe)s  -Oi
    ... import sys
    ... input = repr(sys.stdin.read())
    ... print(sys.argv[0][-14:])
    ... print(sys.argv[1:])
    ... print(input)
    ... if __debug__:
    ...     print('non-optimized')
    ... sys.ps1 = '---'
    ... """ % dict(python_exe=nt_quote_arg(sys.executable)))
    >>> f.close()

    >>> input, output = popen4(nt_quote_arg(os.path.join(sample_directory, 'foo.exe')))
    >>> input.close()
    >>> # This is needed for line ending differences between py2 and py3 on win32
    >>> msg = unicode(output.read(), encoding='utf-8').split("\n")
    >>> for line in msg:
    ...     print(line.strip()) 
    \foo-script.py
    []
    ''
    ---
    <BLANKLINE>

Testing the GUI Version
-----------------------

Now let's test the GUI version with the simple scipt, bar-script.py:

    >>> import os, sys, tempfile
    >>> from setuptools.command.easy_install import nt_quote_arg
    >>> sample_directory = tempfile.mkdtemp()
    >>> f = open(os.path.join(sample_directory, 'bar-script.pyw'), 'w')
    >>> bytes_written = f.write(
    ... """#!%(python_exe)s
    ... import sys
    ... f = open(sys.argv[1], 'wb')
    ... bytes_written = f.write(repr(sys.argv[2]).encode('utf-8'))
    ... f.close()
    ... """ % dict(python_exe=nt_quote_arg(sys.executable)))
    >>> f.close()

We'll also copy gui.exe to the sample-directory with the name bar.exe:

    >>> import pkg_resources
    >>> f = open(os.path.join(sample_directory, 'bar.exe'), 'wb')
    >>> bytes_written = f.write(
    ...     pkg_resources.resource_string('setuptools', 'gui-32.exe')
    ...     )
    >>> f.close()

Finally, we'll run the script and check the result:

    >>> input, output = popen4('"'+nt_quote_arg(os.path.join(sample_directory, 'bar.exe')),
    ...               r' "%s" "Test Argument"' % os.path.join(sample_directory, 'test_output.txt'))
    >>> input.close()
    >>> # This is needed for line ending differences between py2 and py3 on win32
    >>> msg = unicode(output.read(), encoding='utf-8').split("\n")
    >>> for line in msg:
    ...     print(line.strip()) 
    <BLANKLINE>
    >>> f = open(os.path.join(sample_directory, 'test_output.txt'), 'rb')
    >>> print(unicode(f.read(), encoding='utf-8'))
    'Test Argument'
    >>> f.close()


We're done with the sample_directory:

    >>> import shutil
    >>> shutil.rmtree(sample_directory)

