
The default in c# is to pass paramaters by value, which
basically means that when you pass on a variable to a 
function call, you are actaully sending a copy of the object,
instead of a reference to it. This also means that you can
make changes to the paramter from inside the function without
affecting the original object you passed.

The ref and out keywords allow us to change this, so we pass 
along a reference to the object instead of its value. 

=============================================================================================

The out modifier works like the ref modifier. They both ensure
that the parameter is passed by reference instead of by value,
but they do differ:

	A value passed to a ref modifier must be initialized before
	calling the method - this is not true for the out modifier,
	where you can use un-initialized values. 

	You cannot leave a function call with an out paramter, 
	without assigning a value to it. Since you can pass in
	un-initialzed values as an out parameter, you are not able
	to actually use an out parameter inside a funciton, you
	can only assign a new value to it. 

Whether to use out or ref depends on the situation. Both are 
usually used to work around the issue of only being able to
return one value from a function. 
=============================================================================================

The params modifier

Sometimes you may need a function which takes an arbitrary
number of parameters. This could of course be done by accepting
an array or list as a parameter, like this:

	static void GreetPersons(string[] names) {}

However, calling it would be a bit clumsy. In the shortest 
form, it would look like this:

	GreetPersons(new string[] {"John", "Jane", "Tarzan"});

This is fine, but it can be done more efficiently by using
the params keyword:

	static void GreetPersons(params string[] names) {}


Calling it would then look like:
	
	GreetPersons("John", "Jane", "Tarzan");


Another advantage of using the params approach, is that you
are allowed to pass zero parameters to it as well. 

Functions with params can even take other paramaters as well,
as long as the paramter with the params keywords are the last
one. Besides that, only one parameter using the params
keywords can be used per function.
