Big-O notation is oftend called Order of Magnitude.
Big-O is written as:
O(f(n))

it provides a useful approximatin to the actual number of steps
in the computation. 

--------------------------------------
Suppose that for some algo, the exact number of steps is 
T(n) = 5n**2 + 27n + 1005. 
When n is small, 1005 seems large, however as n gets larger, the
n^2 becomes the most important part. 
To approximate T(n) as n gets large, we can ignore everything else
and focus on 5n**2, 5 becomes insignificant as n gets large. We could
say that the function T(n) has an order of magnitude 
f(n) = n**2, or simply that it is O(n**2). 

---------------------------------
Common Functions for Big-O:

f(n)		name
-------------------------
1			constant

log(n)		logarithmic 

n			linear

(n)log(n)	log linear

n**2		quadratic

n**3		cubic

2**n		exponential 
-----------------------------------------------------------



a=5
b=6
c=10
for i in range(n):
   for j in range(n):
         x = i * i
         y = j * j
         z = i * j

for k in range(n):
     w = a*k + 45
     v = b*b
       

d = 33

The number of assignment operations is the sum of four terms.

	1. The first term is the constant 3, representing the 3 
	assignment statements at the start. 

	2. The second term is 3n**2, since there are 3 statements
	that are performed n**2 times due the nested iteration. 

	3. The third is 2n, two statements iterated n times. 

	4. The fourth is the constant 1, representing the final 
	assignment statement. 

This gives: 
T(n) = 3 + 3n**2 + 2n + 1 
	 = 3n**2 + 2n + 4

We can see that the n**2 term will be dominant and therefore this
fragment of code is O(n**2)


