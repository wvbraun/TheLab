Deque - 
	A deque, also known as a double-ended queue, is an ordered
	collection of items similar to the queue. It has two ends, 
	a front and a rear, and the items remain positioned in the
	collection. What makes a deque different is the unrestrictive
	nature of adding and removing items. New items can be added
	at either the frontor therear. 
	Although it can assume many characteristics of stacks and
	queues, it does not require the LIFO and FIFO orderings 
	that are enforced by those data structures. 

------------------------------------------------
The Deque Abstract Data Type

	- Deque(): creates a new deque that is empty. It needs no
			parameters and returns an empty deque. 

	- addFront(item): adds a new item to the front of the deque.
			It needs the item and returns nothing. 

	- addRear(item): adds a new item to the rear of the deque.
			It needs the item and returns nothing. 

	- removeFront(): removes the front item from the deque. 
			It needs no parameters and returns the item. 
			The deque is modified. 

	- removeRear(): removes the rear item from the deque. 
			It needs no parameters and returns the item. 
			The deque is modified. 

	- isEmpty(): tests to see whether the deque is empty. 
			It needs no parameters and returns a boolen value. 

	- size(): returns the number of items in the deque. 

---------------------------------------------------
Examples of Deque Operations, assume d is empty deque:

Deque Operations	|	Deque Contents	| Return Value 

d.isEmpty()			|	[]				| True
d.addRear(4)		|	[4]				|
d.addRear('dog')	|	['dog', 4]		|
d.addFrong('cat')	|	['dog', 4, 'cat']	
d.addFront(True)	|	['dog', 4, 'cat', True]	|
d.size()			|	['dog', 4, 'cat, True	| 4
d.isEmpty()			| ''	| False
d.removeRear()		| 	[4, 'cat', True]		| 'dog'
d.removeFront()		| 	[4, 'cat']				| True


