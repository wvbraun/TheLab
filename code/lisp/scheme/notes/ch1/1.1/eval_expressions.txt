

Consider the simple procdure application (+ 3 4). The value of 
'+' is the addition procedure, the value of '3' is the number 3, 
and the value of '4' is the number 4. Applying the addition 
procedure to 3 and 4 yields 7, so our value is the object 7. 

By applying this process at each level, we can find the value of
the nested expression (* (+ 3 4) 2). The value of * is the 
multiplication procedure, the value of (+ 3 4) we can determine to
be the number 7, and the value of 2 is the number 2. Multiplying 
7 by 2 we get 14, so our answer is 14. 

This rule works for procedure applications but not for quote expressions 
because the subexpressions of a procedure application are 
evaluated, whereas the subexpressions of a quote is not. 
The value of a quote expression in the form 
(quote object) is simply object. 

Constant objects, procedure applications, and quote expressions are 
only three of the many syntatic forms provided by Scheme. These
three are referred to as 'core' syntatic forms. The remaining 
syntatic forms are 'syntactic extensions' defined. 


------------------------------------------------------
Excersises:

1. Write down the steps to evaluate the expression:

((car (cdr (list + - * /))) 17 5)

	1. the value of (list + - */) => (+ - * /) 
	2. (cdr (+ - * /)) => (- * /)
	3. (car (- * /)) => (-) 
	4. (- 17 5) => 12
