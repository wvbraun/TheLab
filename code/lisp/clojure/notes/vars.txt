Clojure provides bindings to Vars, which are containers bound to mutable storage locations. 
There are global bindings, thread-local bindings, bindings that are local to a function, and
bindings that are local to a given form. 

The def special form binds a value to a symbol. It provides a mechanism to define metadata, 
:dynamic, which allows a thread-local value within the scope of a binding call. In other words,
it allows re-defintion of assigned value per execution thread and scope. If the var is not
re-assigned to a new value in a seperate execution thread, the var refers to the value of
the root binding, if access from another thread. 

The let special forms creates bindings to Vars that are bound to the scope within the 
statement. Its first argument is a vector containing name/expression pairs. The
expressions are evaluated in order and theirresults are assigned to the names on their left.
These vars canbe used in the binding of other vars declared within the vector. The expressions
following the var declaration vector contain the vars that are executed only within the let
scope. Vars within functions that are called within let but defined outside of that scope
are not affected by the declartions in the lets vector. 

The binding macro is similar to let, but it gives new, thread-local values to existing 
global bindings throughout the scopes thread of execution. 

