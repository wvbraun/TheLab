package code.interview.general;

public class General
{
	
	public General()
	{
		
	}

	public boolean isRotation(int[] ls1, int[] ls2)
	{
		if (ls1.length != ls2.length)
		{
			return false;
		}
		for (int i = 0; i < ls1.length; ++i)
		{
			if (isSame(ls1, ls2))
			{
				return true;
			}
			
			ls2 = shiftArray(ls2, 1);
		}
		
		return false;
		
	}
	
	private int[] shiftArray(int[] ls, int amt)
	{
		int   j;
		int   i   = amt;
		int[] res = new int[ls.length];
		
		for (j = 0; i < ls.length; ++j, ++i)
		{
			res[j] = ls[i];
		}

		for (i = 0; i < amt; ++i, ++j)
		{
			res[j] = ls[i];
		}
			
		return res;
	}
	
	private boolean isSame(int[] ls1, int[] ls2)
	{
		boolean result = true;
		
		for (int i = 0; i < ls1.length; ++i)
		{
			if (ls1[i] != ls2[i])
			{
				result = false;
				break;
			}
		}
			
		return result;
	}
	
	public int[] findCommonElements(int[] ls1, int[] ls2)
	{
		int[] result = ls1;
		
		for (int x : result)
		{
			if (!hasElement(ls2, x))
			{
				result = removeElement(result, x);
			}
		}
		
		return result;
	}
	
	private boolean hasElement(int[] xs, int e)
	{
		boolean result = false;
		
		for (int x : xs)
		{
			if (x == e)
			{
				result = true;
				break;
			}
		}
		return result;
	}
	
	private int[] removeElement(int[] ls, int e)
	{
		int[] res = new int[ls.length - 1];
		
		for (int i = 0, j = 0; i < ls.length; ++i)
		{
			if (ls[i] != e)
			{
				res[j] = ls[i];
				++j;
			}
		}
		
		return res;
	}
	
	
	private boolean isPrime(int n)
	{
		boolean isPrime = true;
		
		if (n < 2)
		{
			isPrime = false;
		}
		else
		{
			for (int i = 2; i < n; ++i)
			{
				if (n % i == 0)
				{
					isPrime = false;
					break;
				}
			}
		}
		
		return isPrime;	
	}
	
	public int[] getPrimes(int n)
	{
		int[] primes = new int[n];
		
		for (int i = 0, k = 2; i < n; ++k)
		{
			if (isPrime(k))
			{
				primes[i] = k;
				++i;
			}
		}
		
		return primes;
	}
	
}
