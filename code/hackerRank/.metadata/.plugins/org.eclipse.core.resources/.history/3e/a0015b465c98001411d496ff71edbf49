package code.interview.hackerRank.algorithms.dataStructures;

import java.util.Scanner;
import java.util.ArrayList;

/**
 * Problem Statement
 * For an upcoming programming contest, Roy is forming some teams from the n students of his university. 
 * A team can have any number of contestants.
 * 
 * Roy knows the skill level of each contestant. To make the teams work as a unit, he should ensure that 
 * there is no skill gap between the contestants of the same team. In other words, if the skill level of a 
 * contestant is x, then he has either the lowest skill level in his team or there exists another contestant 
 * with skill level of x−1 in the same team. Also, no two contestants of the same team should have same skill 
 * level. Note that a contestant can write buggy code and thus can have a negative skill level.
 * 
 * The more contestants on the team, the more problems they can attempt at a time. So, Roy wants to form 
 * teams such that the smallest team is as large as possible.
 * 
 * Input Format
 * The first line of input contains t (1≤t≤100), the number of test cases.
 * Each case contains an integer n (0≤n≤105), the number of contestants, followed by n space separated integers. 
 * The ith integer denotes the skill level of ith contestant. The absolute values of skill levels will not exceed 
 * 109.
 * The total number of contestants in all cases will not exceed 106.
 * 
 * Output Format
 * For each test case, print the size of smallest team in a separate line.
 * 
 * Sample Input
 * 4  
 * 7 4 5 2 3 -4 -3 -5  
 * 1 -4  
 * 4 3 2 3 1  
 * 7 1 -2 -3 -4 2 0 -1  
 * 
 * Sample Output
 * 3
 * 1
 * 1
 * 7
 * 
 *
 */

public class TeamFormation 
{
	private static int[] buildTeam(int[] team, int skill)
	{
		int[] newTeam;
	}
	
	private static void findSmallestTeam(ArrayList<Integer> team)
	{
		int[] smallest = new int[team.length];
		
		for (int i = 0; i < team.length; ++i)
		{
			int   tmpCount = 0;
			int[] tmp	   = new int[team.length];
			for (int j = 0; j < team.length; ++j)
			{
				if (team[i] == team[j] || team[i] == team[j] + 1)
				{
					tmp[tmpCount] = team[j];
				}
			}
			if (smallest == null)
			{
				smallest = tmp;
			}
			else if (smallest.length > tmp.length)
			{
				smallest = tmp;
			}
		}
		
		System.out.println(smallest.length);
	}

	public static void main(String[] args)
	{
		int  			   i, n, t;
		Scanner 		   scanner = new Scanner(System.in);
		ArrayList<Integer> team = new ArrayList<Integer>();
		
		t = scanner.nextInt();
		while (t > 0)
		{
			n 	 = scanner.nextInt();
			for (i = 0; i < n; ++i)
			{
				team.add(scanner.nextInt());
			}
			
			findSmallestTeam(team);
			--t;
		}
		
		scanner.close();
	}
}
