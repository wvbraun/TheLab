(define (game p)
  (let ((c (generate)))
  	(cond ((and (eq? p 'scissors) (eq? c 'paper))
  		   "Scissors cuts paper")
  		  ((and (eq? p 'paper) (eq? c 'rock))
  		   "Paper covers rock")
  		  ((and (eq? p 'rock) (eq? c 'lizard))
  		   "Rock crushes lizard")
  		  ((and (eq? p 'lizard) (eq? c 'spock))
  		   "Spock smashes scissors")
  		  ((and (eq? p 'scissors) (eq? c 'lizard))
  		   "Scissors decapitates lizard")
  		  ((and (eq? p 'lizard) (eq? c 'paper))
  		   "Lizard eats paper")
  		  ((and (eq? p 'paper) (eq? c 'spock))
  		   "Paper disproves spock")
  		  ((and (eq? p 'spock) (eq? c 'rock))
  		   "Spock vaporizes rock")
  		  ((and (eq? p 'rock) (eq? c 'scissors))
  		   "Rock crushes scissors")
		  ((and (eq? c 'scissors) (eq? p 'paper))
  		   "Scissors cuts paper")
  		  ((and (eq? c 'paper) (eq? p 'rock))
  		   "Paper covers rock")
  		  ((and (eq? c 'rock) (eq? p 'lizard))
  		   "Rock crushes lizard")
  		  ((and (eq? c 'lizard) (eq? p 'spock))
  		   "Spock smashes scissors")
  		  ((and (eq? c 'scissors) (eq? p 'lizard))
  		   "Scissors decapitates lizard")
  		  ((and (eq? c 'lizard) (eq? p 'paper))
  		   "Lizard eats paper")
  		  ((and (eq? c 'paper) (eq? p 'spock))
  		   "Paper disproves spock")
  		  ((and (eq? c 'spock) (eq? p 'rock))
  		   "Spock vaporizes rock")
  		  ((and (eq? c 'rock) (eq? p 'scissors))
  		   "Rock crushes scissors")
		  (else "tie"))))

(define (generate)
  (let ((res (random 5)))
  	(cond ((= res 0) 'scissors)
  		  ((= res 1) 'rock)
  		  ((= res 2) 'lizard)
  		  ((= res 3) 'spock)
  		  ((= res 4) 'paper))))


(game (generate))
