(require pkg)
(install "github://github.com/iu-c211/c211-libs/master")







(define (brightness c)
  (+ (color-ref c 0)
  	 (color-ref c 1)
  	 (color-ref c 2)))


; energy
(define (energy img r c)
  (cond ((and (topEdge? img r) (leftEdge? img c)) ; (0, 0) 
  		 (leftTopCornerEdgeEnergy img r c))
  		((and (topEdge? img r) (rightEdge? img c)) ; (0, cols - 1)
  		 (rightTopCornerEdgeEnergy img r c))
  		((and (bottomEdge? img r) (leftEdge? img c)) ; (rows-1, 0)
  		 (leftBottomCornerEdgeEnergy img r c))
  		((and (bottomEdge? img r) (rightEdge? img c)) ; (rows-1, cols-1)
  		 (rightBottomCornerEdgeEnergy img r c))
  		((topEdge? img r) (topEdgeEnergy img r c)) ; (0, #)
  		((bottomEdge? img r) (bottomEdgeEnergy img r c)) ; (rows-1, #)
  		((leftEdge? img c) (leftEdgeEnergy img r c)) ; (#, 0)
  		((rightEdge? img c) (rightEdgeEnergy img r c)) ; (#, cols-1)
  		(else
  		  (let ((a (brightness (image-ref img (- r 1) (- c 1))))
  		  		(b (brightness (image-ref img (- r 1) c)))
  		  		(c (brightness (image-ref img (- r 1) (+ c 1))))
  		  		(d (brightness (image-ref img r (- c 1))))
  		  		(f (brightness (image-ref img r (+ c 1))))
  		  		(g (brightness (image-ref img (+ r 1) (- c 1))))
  		  		(h (brightness (image-ref img (+ r 1) c)))
  		  		(i (brightness (image-ref img (+ r 1) (+ c 1)))))
  		  	(energyCalc a b c d f g h i)))))

(define (energyCalc a b c d f g h i)
  (define (xenergy a d g c f i)
  	(- (+ a (* 2 d) g) c (* 2 f) i))
  (define (yenergy a b c g h i)
  	(- (+ a (* 2 b) c) g (* 2 h) i))
  (sqrt (+ (expt (xenergy a d g c f i) 2)
  		   (expt (yenergy a b c g h i) 2))))

(define (topEdge? img r) 
  (zero? r))
(define (bottomEdge? img r)
  (= r (- (image-rows img) 1)))
(define (leftEdge? img c)
  (zero? c))
(define (rightEdge? img c)
  (= c (- (image-cols img) 1)))

;; (0,0)
(define (leftTopCornerEdgeEnergy img r c)
  (let ((a 0)
  		(b 0)
  		(c 0)
  		(d 0)
  		(f (brightness (image-ref img r (+ c 1))))
  		(g 0)
  		(h (brightness (image-ref img (+ r 1) c)))
  		(i (brightness (image-ref img (+ r 1) (+ c 1)))))
  	(energyCalc a b c d f g h i)))


;; (0, image-cols img)
(define (rightTopCornerEdgeEnergy img r c)
  (let ((a 0)
  		(b 0)
  		(c 0)
  		(d (brightness (image-ref img r (- c 1))))
  		(f 0)
  		(g (brightness (image-ref img (+ r 1) (- c 1))))
  		(h (brightness (image-ref img (+ r 1) c)))
  		(i 0))
  	(energyCalc a b c d f g h i)))

;; (image-rows img, 0)
(define (leftBottomCornerEdgeEnergy img r c)
  (let ((a 0)
  		(b (brightness (image-ref img (- r 1) c)))
  		(c (brightness (image-ref img (- r 1) (+ c 1))))
  		(d 0)
  		(f (brightness (image-ref img r (+ c 1))))
  		(g 0)
  		(h 0)
  		(i 0))
  	(energyCalc a b c d f g h i)))

;; (image-rows img, image-cols img)
(define (rightBottomCornerEdgeEnergy img r c)
  (let ((a (brightness (image-ref img (- r 1) (- c 1))))
  		(b (brightness (image-ref img (- r 1) c)))
  		(c 0)
  		(d (brightness (image-ref img r (- c 1))))
  		(f 0)
  		(g 0)
  		(h 0)
  		(i 0))
  	(energyCalc a b c d f g h i)))


(define (leftEdgeEnergy img r c)
  (let ((a 0)
  		(b (brightness (image-ref img (- r 1) c)))
  		(c (brightness (image-ref img (- r 1) (+ c 1))))
  		(d 0)
  		(f (brightness (image-ref img r (+ c 1))))
  		(g 0)
  		(h (brightness (image-ref img (+ r 1) c)))
  		(i (brightness (image-ref img (+ r 1) (+ c 1)))))
  	(energyCalc a b c d f g h i)))

(define (rightEdgeEnergy img r c)
  (let ((a (brightness (image-ref img (- r 1) (- c 1))))
  		(b (brightness (image-ref img (- r 1) c)))
  		(c 0)
  		(d (brightness (image-ref img r (- c 1))))
  		(f 0)
  		(g (brightness (image-ref img (+ r 1) (- c 1))))
  		(h (brightness (image-ref img (+ r 1) c)))
  		(i 0))
  	(energyCalc a b c d f g h i)))

(define (topEdgeEnergy img r c)
  (let ((a 0)
  		(b 0)
  		(c 0)
  		(d (brightness (image-ref img r (- c 1))))
  		(f (brightness (image-ref img r (+ c 1))))
  		(g (brightness (image-ref img (+ r 1) (- c 1))))
  		(h (brightness (image-ref img (+ r 1) c)))
  		(i (brightness (image-ref img (+ r 1) (+ c 1)))))
  	(energyCalc a b c d f g h i)))

(define (bottomEdgeEnergy img r c)
  (let ((a (brightness (image-ref img (- r 1) (- c 1))))
  		(b (brightness (image-ref img (- r 1) c)))
  		(c (brightness (image-ref img (- r 1) (+ c 1))))
  		(d (brightness (image-ref img r (- c 1))))
  		(f (brightness (image-ref img r (+ c 1))))
  		(g 0)
  		(h 0)
  		(i 0))
  	(energyCalc a b c d f g h i)))




